---
name: ""
description: ""
output_directory: output_data

graph_data:
  graph:
    directed: False
    verbose: True
    skip_self_loops: False
    nodes_column: 'id'
    node_types_column: 'category'
    default_node_type: 'biolink:NamedThing'
    ignore_duplicated_nodes: True
    # other parameters:
    # nodes_column_number: int = None
    # node_types_column_number: int = None,
    # node_header: optional str
    # node_rows_to_skip: int = 0
    # node_separator: str = "\t"
    sources_column: 'subject'
    destinations_column: 'object'
    edge_types_column: 'weight'  # fix this
    default_edge_type: 'biolink:related_to'
    ignore_duplicated_edges: True
    node_path: tests/resources/test_graphs/nodes.tsv
    edge_path: tests/resources/test_graphs/edges.tsv
    # edge_header: str
    # edge_rows_to_skip: int = 0,
    # sources_column_number: int = 0
    # destinations_column_number: int = 1
    # edge_types_column_number: int = None
    # edge_separator: str = "\t"
    ### weight stuff
    weights_column: 'weight'
    default_weight: 1
    # weights_column_number: int = None

  #
  # classifier-specific graphs:
  #
  # (when making a classifier, positive training graph is assumed to be 'graph' above)
  pos_validation_graph:
    node_path: tests/resources/test_graphs/nodes.tsv
    edge_path: tests/resources/test_graphs/edges.tsv
  neg_training_graph:
    edge_path: tests/resources/test_graphs/edges.tsv
  neg_validation_graph:
    edge_path: tests/resources/test_graphs/edges.tsv

embeddings:
  resume: True
  embedding_file_name: SkipGram_80_20_kg_covid_19_20201001_training_test_epoch_500_delta_0.0001_embedding.npy
  model_file_name: model.h5
  embiggen_params:
    epochs: 5 # typically more than this
    seq_params:  # these params are passed to Node2VecSequence()
      walk_length: 100
      batch_size: 512
      window_size: 4
      return_weight: 1.0  # 1/p
      explore_weight: 1.0  # 1/q
      iterations: 20
    model: skipgram  # or CBOW
    node2vec_params:  # these params are passed to SkipGram() or CBOW()
      embedding_size: 100
      negative_samples: 30
    early_stopping:  # optional
      patience: 5
      delta: 0.0001
      restore_best_weights: True
    optimizer:  # hard-coded to Nadam for now
      learning_rate: 0.1

classifier:
  - edge_method: average # one of EdgeTransformer.methods: hadamard, average, weightedL1, weightedL2
  - type: neural network
    model:
      type: tensorflow.keras.models.Sequential
      layers:
        - type: tensorflow.keras.layers.Input
          parameters:
            input_shape: 100   # must match embedding_size up above
        - type: tensorflow.keras.layers.Dense
          parameters:
            neurons: 128
            activation: relu
        - type: tensorflow.keras.layers.Dense
          parameters:
            neurons: 32
            activation: relu
            activity_regularizer: tensorflow.keras.regularizers.l1_l2(l1=1e-5, l2=1e-4)
        - type: tensorflow.keras.layers.Dropout
          parameters:
            rate: 0.5
        - type: tensorflow.keras.layers.Dense
          parameters:
            neurons: 16
            activation: relu
        - type: tensorflow.keras.layers.Dense
          parameters:
            neurons: 1
            activation: sigmoid
    model_compile:
      loss: binary_crossentropy
      optimizer: nadam
      metrics:  # these can be tensorflow objects or a string that tensorflow understands, e.g. 'accuracy'
        - type: tensorflow.keras.metrics.AUC
          parameters:
            curve: PR
            name: auprc
        - type: tensorflow.keras.metrics.AUC
          parameters:
            curve: ROC
            name: auroc
        - type: tensorflow.keras.metrics.Recall
          parameters:
            name: Recall
        - type: tensorflow.keras.metrics.Precision
          parameters:
            name: Precision
        - type: accuracy
    model_fit:
      parameters:
        batch_size: 2**12
        epochs: 1000
        callbacks:
          - type: tensorflow.keras.callbacks.EarlyStopping
            parameters:
              label: val_loss
              patience: 5
              min_delta: 0.001  # min improvement to be considered progres
          - type: tensorflow.keras.callbacks.ReduceLROnPlateau
  - type: Decision Tree
    model:
      type: sklearn.tree.DecisionTreeClassifier
      parameters:
        max_depth: 30
        random_state: 42
  - type: Random Forest
    model:
      type: sklearn.ensemble.RandomForestClassifier
      parameters:
        n_estimators: 500
        max_depth: 30
        n_jobs: 8  # cpu count
        random_state: 42
  - type: Logistic Regression
    model:
      type: sklearn.linear_model.LogisticRegression
      parameters:
        random_state: 42
        max_iter: 1000
